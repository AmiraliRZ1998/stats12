})
}
shinyApp(ui, server)
library(shiny)
ui <- basicPage(
plotOutput("plot1",
click = "plot_click",
dblclick = "plot_dblclick",
hover = "plot_hover",
brush = "plot_brush"
)
)
server <- function(input, output) {
library(jpeg)
prev_vals <- NULL
structures <- reactiveValues(data = data.frame(box_id = numeric(), xmin = numeric(), ymin = numeric(), xmax = numeric(), xmax = numeric()))
output$plot1 <- renderPlot({
#img <- readJPEG("street_1.jpg", native = TRUE)
img <- png::readPNG("images/regression_correlation.png")
img <- as.raster(img)
plot(1:dim(img)[2], type='n', axes=FALSE, frame.plot=FALSE,ylab="", xlab = "")
rasterImage(img,1,1,dim(img)[1],dim(img)[2])
if (nrow(structures$data) > 0) {
r <- structures$data
rect(r$xmin, r$ymin, r$xmax, r$ymax, border = "red", lwd = 2)
}
}, height = dim(img)[1], width = dim(img)[2])
observe({
e <- input$plot_brush
if (!is.null(e)) {
vals <- data.frame(xmin = round(e$xmin, 1), ymin = round(e$ymin, 1), xmax = round(e$xmax, 1), ymax = round(e$ymax, 1))
if (identical(vals,prev_vals)) return() #We dont want to change anything if the values havent changed.
structures$data <- rbind(structures$data,cbind(data.frame(box_id = nrow(structures$data)+1),vals))
prev_vals <<- vals
}
})
output$info <- renderText({
xy_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
}
xy_range_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("xmin=", round(e$xmin, 1), " xmax=", round(e$xmax, 1),
" ymin=", round(e$ymin, 1), " ymax=", round(e$ymax, 1))
}
paste0(
"click: ", xy_str(input$plot_click),
"dblclick: ", xy_str(input$plot_dblclick),
"hover: ", xy_str(input$plot_hover),
"brush: ", xy_range_str(input$plot_brush)
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- basicPage(
plotOutput("plot1",
click = "plot_click",
dblclick = "plot_dblclick",
hover = "plot_hover",
brush = "plot_brush"
)
)
server <- function(input, output) {
library(jpeg)
prev_vals <- NULL
structures <- reactiveValues(data = data.frame(box_id = numeric(), xmin = numeric(), ymin = numeric(), xmax = numeric(), xmax = numeric()))
output$plot1 <- renderPlot({
#img <- readJPEG("street_1.jpg", native = TRUE)
img <- png::readPNG("images/regression_correlation.png")
img <- as.raster(img)
plot(1:dim(img)[2], type='n', axes=FALSE, frame.plot=FALSE,ylab="", xlab = "")
rasterImage(img,1,1,dim(img)[1],dim(img)[2])
if (nrow(structures$data) > 0) {
r <- structures$data
rect(r$xmin, r$ymin, r$xmax, r$ymax, border = "red", lwd = 3)
}
}, height = dim(img)[1], width = dim(img)[2])
observe({
e <- input$plot_brush
if (!is.null(e)) {
vals <- data.frame(xmin = round(e$xmin, 1), ymin = round(e$ymin, 1), xmax = round(e$xmax, 1), ymax = round(e$ymax, 1))
if (identical(vals,prev_vals)) return() #We dont want to change anything if the values havent changed.
structures$data <- rbind(structures$data,cbind(data.frame(box_id = nrow(structures$data)+1),vals))
prev_vals <<- vals
}
})
output$info <- renderText({
xy_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
}
xy_range_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("xmin=", round(e$xmin, 1), " xmax=", round(e$xmax, 1),
" ymin=", round(e$ymin, 1), " ymax=", round(e$ymax, 1))
}
paste0(
"click: ", xy_str(input$plot_click),
"dblclick: ", xy_str(input$plot_dblclick),
"hover: ", xy_str(input$plot_hover),
"brush: ", xy_range_str(input$plot_brush)
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- basicPage(
plotOutput("plot1",
click = "plot_click",
dblclick = "plot_dblclick",
hover = "plot_hover",
brush = "plot_brush"
)
)
server <- function(input, output) {
prev_vals <- NULL
structures <- reactiveValues(data = data.frame(box_id = numeric(), xmin = numeric(), ymin = numeric(), xmax = numeric(), xmax = numeric()))
output$plot1 <- renderPlot({
#img <- readJPEG("street_1.jpg", native = TRUE)
img <- png::readPNG("images/regression_correlation.png")
img <- grDevices::as.raster(img)
base::plot(1:dim(img)[1], type='n', axes=FALSE, frame.plot=FALSE,ylab="", xlab = "")
graphics::rasterImage(img,1,1,dim(img)[1],dim(img)[2])
if (nrow(structures$data) > 0) {
r <- structures$data
rect(r$xmin, r$ymin, r$xmax, r$ymax, border = "red", lwd = 3)
}
}, height = dim(img)[1], width = dim(img)[2])
observe({
e <- input$plot_brush
if (!is.null(e)) {
vals <- data.frame(xmin = round(e$xmin, 1), ymin = round(e$ymin, 1), xmax = round(e$xmax, 1), ymax = round(e$ymax, 1))
if (identical(vals,prev_vals)) return() #We dont want to change anything if the values havent changed.
structures$data <- rbind(structures$data,cbind(data.frame(box_id = nrow(structures$data)+1),vals))
prev_vals <<- vals
}
})
output$info <- renderText({
xy_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
}
xy_range_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("xmin=", round(e$xmin, 1), " xmax=", round(e$xmax, 1),
" ymin=", round(e$ymin, 1), " ymax=", round(e$ymax, 1))
}
paste0(
"click: ", xy_str(input$plot_click),
"dblclick: ", xy_str(input$plot_dblclick),
"hover: ", xy_str(input$plot_hover),
"brush: ", xy_range_str(input$plot_brush)
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- basicPage(
plotOutput("plot1",
click = "plot_click",
dblclick = "plot_dblclick",
hover = "plot_hover",
brush = "plot_brush"
)
)
server <- function(input, output) {
prev_vals <- NULL
structures <- reactiveValues(data = data.frame(box_id = numeric(), xmin = numeric(), ymin = numeric(), xmax = numeric(), xmax = numeric()))
output$plot1 <- renderPlot({
#img <- readJPEG("street_1.jpg", native = TRUE)
img <- png::readPNG("images/regression_correlation.png")
img <- grDevices::as.raster(img)
base::plot(1:dim(img)[1], y = 1:dim(img)[2], type='n', axes=FALSE, frame.plot=FALSE,ylab="", xlab = "")
graphics::rasterImage(img,1,1,dim(img)[1],dim(img)[2])
if (nrow(structures$data) > 0) {
r <- structures$data
rect(r$xmin, r$ymin, r$xmax, r$ymax, border = "red", lwd = 3)
}
}, height = dim(img)[1], width = dim(img)[2])
observe({
e <- input$plot_brush
if (!is.null(e)) {
vals <- data.frame(xmin = round(e$xmin, 1), ymin = round(e$ymin, 1), xmax = round(e$xmax, 1), ymax = round(e$ymax, 1))
if (identical(vals,prev_vals)) return() #We dont want to change anything if the values havent changed.
structures$data <- rbind(structures$data,cbind(data.frame(box_id = nrow(structures$data)+1),vals))
prev_vals <<- vals
}
})
output$info <- renderText({
xy_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
}
xy_range_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("xmin=", round(e$xmin, 1), " xmax=", round(e$xmax, 1),
" ymin=", round(e$ymin, 1), " ymax=", round(e$ymax, 1))
}
paste0(
"click: ", xy_str(input$plot_click),
"dblclick: ", xy_str(input$plot_dblclick),
"hover: ", xy_str(input$plot_hover),
"brush: ", xy_range_str(input$plot_brush)
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- basicPage(
plotOutput("plot1",
click = "plot_click",
dblclick = "plot_dblclick",
hover = "plot_hover",
brush = "plot_brush"
)
)
server <- function(input, output) {
prev_vals <- NULL
structures <- reactiveValues(data = data.frame(box_id = numeric(), xmin = numeric(), ymin = numeric(), xmax = numeric(), xmax = numeric()))
output$plot1 <- renderPlot({
#img <- readJPEG("street_1.jpg", native = TRUE)
img <- png::readPNG("images/regression_correlation.png")
img <- grDevices::as.raster(img)
base::plot(c(1, dim(img)[1]), y = c(1, dim(img)[2]), type='n', axes=FALSE, frame.plot=FALSE,ylab="", xlab = "")
graphics::rasterImage(img,1,1,dim(img)[1],dim(img)[2])
if (nrow(structures$data) > 0) {
r <- structures$data
rect(r$xmin, r$ymin, r$xmax, r$ymax, border = "red", lwd = 3)
}
}, height = dim(img)[1], width = dim(img)[2])
observe({
e <- input$plot_brush
if (!is.null(e)) {
vals <- data.frame(xmin = round(e$xmin, 1), ymin = round(e$ymin, 1), xmax = round(e$xmax, 1), ymax = round(e$ymax, 1))
if (identical(vals,prev_vals)) return() #We dont want to change anything if the values havent changed.
structures$data <- rbind(structures$data,cbind(data.frame(box_id = nrow(structures$data)+1),vals))
prev_vals <<- vals
}
})
output$info <- renderText({
xy_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
}
xy_range_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("xmin=", round(e$xmin, 1), " xmax=", round(e$xmax, 1),
" ymin=", round(e$ymin, 1), " ymax=", round(e$ymax, 1))
}
paste0(
"click: ", xy_str(input$plot_click),
"dblclick: ", xy_str(input$plot_dblclick),
"hover: ", xy_str(input$plot_hover),
"brush: ", xy_range_str(input$plot_brush)
)
})
}
shinyApp(ui, server)
c(1, dim(img)[2])
dim(img)
base::plot(c(1, dim(img)[2]), y = c(1, dim(img)[1]), type='n', axes=FALSE, frame.plot=FALSE,ylab="", xlab = "")
img <- png::readPNG("images/regression_correlation.png")
img <- grDevices::as.raster(img)
base::plot(c(1, dim(img)[2]), y = c(1, dim(img)[1]), type='n', axes=FALSE, frame.plot=FALSE,ylab="", xlab = "")
graphics::rasterImage(img,1,1,dim(img)[1],dim(img)[2])
img <- png::readPNG("images/regression_correlation.png")
img <- grDevices::as.raster(img)
base::plot(c(1, dim(img)[2]), y = c(1, dim(img)[1]), type='n', axes=FALSE, frame.plot=FALSE,ylab="", xlab = "")
graphics::rasterImage(img,xleft = 1,ybottom = 1,xright = dim(img)[2], ytop = dim(img)[1])
dim(img)
library(shiny)
ui <- basicPage(
plotOutput("plot1",
click = "plot_click",
dblclick = "plot_dblclick",
hover = "plot_hover",
brush = "plot_brush"
)
)
server <- function(input, output) {
prev_vals <- NULL
structures <- reactiveValues(data = data.frame(box_id = numeric(), xmin = numeric(), ymin = numeric(), xmax = numeric(), xmax = numeric()))
output$plot1 <- renderPlot({
#img <- readJPEG("street_1.jpg", native = TRUE)
img <- png::readPNG("images/regression_correlation.png")
img <- grDevices::as.raster(img)
base::plot(c(1, dim(img)[2]), y = c(1, dim(img)[1]), type='n', axes=FALSE, frame.plot=FALSE,ylab="", xlab = "")
graphics::rasterImage(img,xleft = 1,ybottom = 1,xright = dim(img)[2], ytop = dim(img)[1])
if (nrow(structures$data) > 0) {
r <- structures$data
rect(r$xmin, r$ymin, r$xmax, r$ymax, border = "red", lwd = 3)
}
}, height = dim(img)[1], width = dim(img)[2])
observe({
e <- input$plot_brush
if (!is.null(e)) {
vals <- data.frame(xmin = round(e$xmin, 1), ymin = round(e$ymin, 1), xmax = round(e$xmax, 1), ymax = round(e$ymax, 1))
if (identical(vals,prev_vals)) return() #We dont want to change anything if the values havent changed.
structures$data <- rbind(structures$data,cbind(data.frame(box_id = nrow(structures$data)+1),vals))
prev_vals <<- vals
}
})
output$info <- renderText({
xy_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
}
xy_range_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("xmin=", round(e$xmin, 1), " xmax=", round(e$xmax, 1),
" ymin=", round(e$ymin, 1), " ymax=", round(e$ymax, 1))
}
paste0(
"click: ", xy_str(input$plot_click),
"dblclick: ", xy_str(input$plot_dblclick),
"hover: ", xy_str(input$plot_hover),
"brush: ", xy_range_str(input$plot_brush)
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- basicPage(
plotOutput("plot1",
click = "plot_click",
dblclick = "plot_dblclick",
hover = "plot_hover",
brush = "plot_brush"
)
)
server <- function(input, output) {
prev_vals <- NULL
structures <- reactiveValues(data = data.frame(box_id = numeric(), xmin = numeric(), ymin = numeric(), xmax = numeric(), xmax = numeric()))
output$plot1 <- renderPlot({
#img <- readJPEG("street_1.jpg", native = TRUE)
img <- png::readPNG("images/regression_correlation.png")
img <- grDevices::as.raster(img)
base::plot(x = c(1, dim(img)[2]), y = c(1, dim(img)[1]), type='n', axes=FALSE, frame.plot=FALSE,ylab="", xlab = "")
graphics::rasterImage(img,xleft = 1,ybottom = 1,xright = dim(img)[2], ytop = dim(img)[1])
if (nrow(structures$data) > 0) {
r <- structures$data
rect(r$xmin, r$ymin, r$xmax, r$ymax, border = "red", lwd = 3)
}
})
observe({
e <- input$plot_brush
if (!is.null(e)) {
vals <- data.frame(xmin = round(e$xmin, 1), ymin = round(e$ymin, 1), xmax = round(e$xmax, 1), ymax = round(e$ymax, 1))
if (identical(vals,prev_vals)) return() #We dont want to change anything if the values havent changed.
structures$data <- rbind(structures$data,cbind(data.frame(box_id = nrow(structures$data)+1),vals))
prev_vals <<- vals
}
})
output$info <- renderText({
xy_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
}
xy_range_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("xmin=", round(e$xmin, 1), " xmax=", round(e$xmax, 1),
" ymin=", round(e$ymin, 1), " ymax=", round(e$ymax, 1))
}
paste0(
"click: ", xy_str(input$plot_click),
"dblclick: ", xy_str(input$plot_dblclick),
"hover: ", xy_str(input$plot_hover),
"brush: ", xy_range_str(input$plot_brush)
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- basicPage(
plotOutput("plot1",
click = "plot_click",
dblclick = "plot_dblclick",
hover = "plot_hover",
brush = "plot_brush"
)
)
server <- function(input, output) {
prev_vals <- NULL
structures <- reactiveValues(data = data.frame(box_id = numeric(), xmin = numeric(), ymin = numeric(), xmax = numeric(), xmax = numeric()))
output$plot1 <- renderPlot({
#img <- readJPEG("street_1.jpg", native = TRUE)
img <- png::readPNG("images/regression_correlation.png")
img <- grDevices::as.raster(img)
base::plot(x = c(1, dim(img)[2]), y = c(1, 30), type='n', axes=FALSE, frame.plot=FALSE,ylab="", xlab = "")
graphics::rasterImage(img,xleft = 1,ybottom = 1,xright = dim(img)[2], ytop = dim(img)[1])
if (nrow(structures$data) > 0) {
r <- structures$data
rect(r$xmin, r$ymin, r$xmax, r$ymax, border = "red", lwd = 3)
}
})
observe({
e <- input$plot_brush
if (!is.null(e)) {
vals <- data.frame(xmin = round(e$xmin, 1), ymin = round(e$ymin, 1), xmax = round(e$xmax, 1), ymax = round(e$ymax, 1))
if (identical(vals,prev_vals)) return() #We dont want to change anything if the values havent changed.
structures$data <- rbind(structures$data,cbind(data.frame(box_id = nrow(structures$data)+1),vals))
prev_vals <<- vals
}
})
output$info <- renderText({
xy_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
}
xy_range_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("xmin=", round(e$xmin, 1), " xmax=", round(e$xmax, 1),
" ymin=", round(e$ymin, 1), " ymax=", round(e$ymax, 1))
}
paste0(
"click: ", xy_str(input$plot_click),
"dblclick: ", xy_str(input$plot_dblclick),
"hover: ", xy_str(input$plot_hover),
"brush: ", xy_range_str(input$plot_brush)
)
})
}
shinyApp(ui, server)
library(kableExtra)
require(gridExtra)
library(tidySEM)
library(scales)
library(eulerr)
options(knitr.kable.NA = '')
invdat <- matrix(c(1, .3, .24,
.3, 1, .5,
.24, .5, 1), nrow = 3, ncol = 3, byrow = TRUE)
set.seed(76)
invdat <- data.frame(mvtnorm::rmvnorm(60, sigma = invdat))
names(invdat) <- c("Work_hours", "Gender_role", "Involvement")
invdat$Work_hours <- rescale(invdat$Work_hours, to = c(0,40))
invdat$Gender_role <- rescale(invdat$Gender_role, to = c(1,7))
invdat$Involvement <- rescale(invdat$Involvement, to = c(0,50))
invmodel <- lm(Involvement ~ Work_hours + Gender_role, invdat)
m_work <- lm(Involvement ~ Work_hours, invdat)
m_gender <- lm(Involvement ~ Gender_role, invdat)
m_both <- lm(Involvement ~ Gender_role+Work_hours, invdat)
report(summary(m_work)[[r.squared]])
report(summary(m_work)[[rsquared]])
tmp <- summary(m_work)
report(summary(m_work)[[rsquared]])
report(summary(m_work)[["rsquared"]])
summary(m_work)[["rsquared"]]
summary(m_work)[["r.squared"]]
report(summary(m_work)[["r.squared"]])
summary.aov(m_both)
summary.aov(m_work)
5384-5893
(5893-5384)/(5893/58)
anova(m_work, m_both)
(5892.6-5384)/(5892.6/58)
(5892.6-5384)
(5892.6-5384)/(5892.6/57)
(5892.6-5384)/(5892.6/58)
worcs::git_up
git_update()
worcs::git_update()
aov(m_both)
aov(m_work)
tmp2 <- aov(m_work)
tmp1 <- aov(m_both)
sum((tmp1$model$Involvement-mean(tmp1$model$Involvement))^2)
tmp1
tmp2
tmp1 <- summary(tmp1)
tmp1
class(tmp1)
tmp1 <- unclass(tmp1)
tmp1[[1]]$`Sum Sq`
tmp2 <- unclass(summary(tmp2))
tmp2[[1]]$`Sum Sq`
sum(tmp2[[1]]$`Sum Sq`)
tail(tmp2[[1]]$`Sum Sq`, 1) - tail(tmp1[[1]]$`Sum Sq`, 1)
sum(tmp2[[1]]$`Sum Sq`[-length(tmp2[[1]]$`Sum Sq`)] - sum(tmp1[[1]]$`Sum Sq`[-length(tmp1[[1]]$`Sum Sq`)]
)
sum(tmp2[[1]]$`Sum Sq`[-length(tmp2[[1]]$`Sum Sq`)]) - sum(tmp1[[1]]$`Sum Sq`[-length(tmp1[[1]]$`Sum Sq`)])
tmp1[[1]]$Df
tmp2[[1]]$Df
library(scales)
set.seed(32)
n <- 178
Geslacht <- rbinom(n, 1, .5)
Genderrole <- 2*Geslacht+rnorm(n)
Genderrole <- round(scales::rescale(Genderrole, to = c(1,7)))
Involvement <- 5 + 15*Geslacht + 4*Genderrole + rnorm(n)
dichmodel <- lm(Involvement ~ Geslacht + Genderrole)
ggplot(data.frame(Involvement, Geslacht = factor(Geslacht), Genderrole), aes(x=Genderrole, y=Involvement, colour = Geslacht))+
geom_point()+
geom_abline(intercept = dichmodel$coefficients[1]+dichmodel$coefficients[2], slope = dichmodel$coefficients[3], colour = "red")+
geom_abline(intercept = dichmodel$coefficients[1], slope = dichmodel$coefficients[3], colour = "blue")+
theme_bw()+
scale_colour_manual(values = c("blue", "red"))+theme(legend.position = "none")
Involvement2 <- 5 + 30*Geslacht + 4*Genderrole + -3.8*Geslacht*Genderrole + rnorm(n)
involvement2model <- lm(Involvement2 ~ Geslacht * Genderrole)
ggplot(data.frame(Involvement = Involvement2, Geslacht = factor(Geslacht), Genderrole), aes(x=Genderrole, y=Involvement, colour = Geslacht))+
geom_point()+
geom_abline(intercept = involvement2model$coefficients[1]+involvement2model$coefficients[2], slope = involvement2model$coefficients[3]+involvement2model$coefficients[4], colour = "red")+
geom_abline(intercept = involvement2model$coefficients[1], slope = involvement2model$coefficients[3], colour = "blue")+
theme_bw()+
scale_colour_manual(values = c("blue", "red"))+theme(legend.position = "none")
summary(m_both)
summary(lm(Involvement ~Gender_role * Work_hours, invdat))
12.50- (.20 * 40)
1.50+(0.07 * 40)
worcs::git_update()
