qnorm(72, 70, sd = 10/sqrt(40))
(72-70)/10/sqrt(40)
(72-70)/(10/sqrt(40))
37.863 -.320 *26.67
-158.012 + 26.560*11 + 12.056*9
length(c(answer = "Variety at work and Learning possibilities", "Learning possibilities", "Variety at work" "Independence at work", "None"))
length(c(answer = "Variety at work and Learning possibilities", "Learning possibilities", "Variety at work" "Independence at work", "None"))
length(c(answer = "Variety at work and Learning possibilities", "Learning possibilities", "Variety at work", "Independence at work", "None"))
27.166-7.103
-.237+.439
df=Salaries
df=Salaries
??Salaries
library(carData)
df=Salaries
library(car)
aov1 = aov(salary ~ sex + rank + yrs.since.phd + yrs.service + discipline, df)
Anova(aov1 ,type="III")
levels(df$rank)
contrasts(df$rank)
summary.lm(aov1)
aov2 = aov(salary ~ sex + rank + yrs.since.phd + yrs.service + discipline, df)
summary(aov2)
summary.lm(aov2)
summary.lm(aov1)
contrasts(df$rank) = cbind(contrast1, contrast2)
contrast1 = c(-2,1,1)
contrast2 = c(0,-1,1)
contrasts(df$rank) = cbind(contrast1, contrast2)
aov2 = aov(salary ~ sex + rank + yrs.since.phd + yrs.service + discipline, df)
summary(aov2)
summary.lm(aov2)
(4.808-5)/.228
-1*(25/22)
-1*(24/22)
-1*(27/22)
5.457
+.177
5.457+.177
1 − (1 − .05)^3
1 - (1 - .05)^3
1 - (1 - .05)^10
.05/7
25/(25+24)
25/(25+24)
24/(25+24)
22/(22+27+22)
27/(22+27+22)
5.7356-5.0518
ns <- c(25,
22,
24,
27,
22)
ns/120
25/((25+24)/120)
((25+24)/120)
(25/(25+24))/((25+24)/120)
(25/(25+24))
((25+24)/120)
(25/(25+24))*((25+24)/120)
25/(25+24)
24/(25+24)
1.507/2
df <- iris[1:100, c("Sepal.Length", "Species")]
df$Species <- relevel(df$Species)
df$Species <- droplevels(df$Species)
names(df) <- c("y", "x")
tapply(df$y, df$x, mean)
diff(tapply(df$y, df$x, mean))
tapply(df$y, df$x, mean)
diff(tapply(df$y, df$x, mean))
c(M = mean(df$y), tapply(df$y, df$x, mean), d = diff(tapply(df$y, df$x, mean)))
df$d <- ifelse(df$x == "setosa", 0, 1)
summary(lm(y~x, df))
df <- iris
names(df) <- c("y", "x")
c(M = mean(df$y), tapply(df$y, df$x, mean), d = diff(tapply(df$y, df$x, mean)))
df <- iris[, c("Sepal.Length", "Species")]
names(df) <- c("y", "x")
c(M = mean(df$y), tapply(df$y, df$x, mean), d = diff(tapply(df$y, df$x, mean)))
df$setVvervir <- ifelse(df$x == "setosa", 0, 1)
c(M = mean(df$y), tapply(df$y, factor(df$setVvervir), mean), d = diff(tapply(df$y, df$x, mean)))
df$d <- ifelse(df$x == "versicolor", 0, 1)
c(M = mean(df$y), tapply(df$y, factor(df$setVvervir), mean), d = diff(tapply(df$y, df$x, mean)))
summary(lm(y~setVvervir+d, df))
summary(res)
res <- lm(y~setVvervir+d, df)
summary(res)
coef(res)[1:2]
sum(coef(res)[1:2])
df <- iris[sample.int(nrow(iris), 70), c("Sepal.Length", "Species")]
table(df$Species)
set.seed(2)
df <- iris[sample.int(nrow(iris), 70), c("Sepal.Length", "Species")]
table(df$Species)
set.seed(3)
df <- iris[sample.int(nrow(iris), 70), c("Sepal.Length", "Species")]
table(df$Species)
set.seed(4)
df <- iris[sample.int(nrow(iris), 70), c("Sepal.Length", "Species")]
table(df$Species)
set.seed(5)
df <- iris[sample.int(nrow(iris), 70), c("Sepal.Length", "Species")]
table(df$Species)
mean(df$Sepal.Length[df$Species == "setosa"])
mean(df$Sepal.Length[!df$Species == "setosa"])
matrix(c(2, -1, -1, 0, 1, -1), ncol = 2)
contrasts(df$Species) <- matrix(c(2, -1, -1, 0, 1, -1), ncol = 2)
res <- lm(Sepal.Length~Species, df)
res
mean(df$Sepal.Length[df$Species == "setosa"])-mean(df$Sepal.Length[!df$Species == "setosa"])
matrix(c(2, -1, -1, 0, 1, -1), ncol = 2)
summary(res)
summary(iris$Sepal.Length, iris$Species)
summary(lm(iris$Sepal.Length~ iris$Species))
mean(df$Sepal.Length[df$Species == "setosa"])-mean(df$Sepal.Length[!df$Species == "setosa"])
contrasts(df$Species) <- matrix(c(.6666, -.3333, -.3333, 0, .5, -.5), ncol = 2)
res <- lm(Sepal.Length~Species, df)
summary(res)
contr.treatment(df$Species)
contr.treatment(3)
contrasts(df$Species) <- contr.treatment(3)
contrasts(df$Species) <- matrix(c(.6666, -.3333, -.3333, 0, .5, -.5), ncol = 2)
res <- lm(Sepal.Length~Species, df)
summary(res)
contrasts(df$Species) <- contr.treatment(3)
res <- lm(Sepal.Length~Species, df)
summary(res)
stopifnot(FALSE)
stopifnot(mean(df$Sepal.Length[df$Species == "setosa"])-mean(df$Sepal.Length[!df$Species == "setosa"]) == coef(res)[2])
worcs::git_update()
library(emmeans)
install.packages("emmeans")
library(emmeans)
res <- lm(Sepal.Length~Species, df)
summary(res)
ctr <- contrast(emmeans(res, "Species"),
list(weighted = c(1, -(25/51), -(26/51))))
ctr
table(df$Species)
mean(df$Sepal.Length[df$Species == "setosa"])-mean(df$Sepal.Length[!df$Species == "setosa"])
contrasts(df$Species) <- matrix(c(1, -(25/51), -(26/51), 0, .5, -.5), ncol = 2)
res <- lm(Sepal.Length~Species, df)
summary(res)
set.seed(5)
df <- iris[sample.int(nrow(iris), 70), c("Sepal.Length", "Species")]
table(df$Species)
mean(df$Sepal.Length[df$Species == "setosa"])
mean(df$Sepal.Length[!df$Species == "setosa"])
res <- lm(Sepal.Length~Species, df)
coef(res)
car::linearHypothesis(res, "(Intercept)=4")
car::linearHypothesis(res, "(Intercept)=5.03")
car::linearHypothesis(res, "(Intercept)=((25/51)*((Intercept)+Speciesversicolor) + (26/51)*((Intercept)+Speciesvirginica)")
df$Int <- 1
res <- lm(Sepal.Length~Int + Species-1, df)
coef(res)
mm <- model.matrix(~Species, df)
mm
mm <- model.matrix(~Species, df)
colnames(mm)[1] <- "Int"
res <- lm(df$Sepal.Length~mm)
summary(res)
res <- lm(df$Sepal.Length~mm-1)
summary(res)
car::linearHypothesis(res, "Int=((25/51)*(Int+Speciesversicolor) + (26/51)*(Int+Speciesvirginica)")
25/51
26/51
car::linearHypothesis(res, "Int=0.4901961*(Int+Speciesversicolor) + 0.5098039*(Int+Speciesvirginica)")
library(tidySEM)
lo <- get_layout("", "Gender", "",
"Behavior", "", "Tip size", rows = 2)
p <- prepare_graph(layout = low)
p <- prepare_graph(layout = lo)
plot(p)
edges <- data.frame(from = "Behavior", to = "Tip size")
p <- prepare_graph(layout = lo, edges= edges)
plot(p)
library(ggplot2)
p$edges
p$nodes
p$nodes$ymin[p$nodes$name == "Gender"]
p$nodes$ymin
p$nodes$node_ymin[p$nodes$name == "Gender"]
plot(p) + geom_segment(x = p$nodes$x[p$nodes$name == "Gender"], xend = x = p$nodes$x[p$nodes$name == "Gender"], y = p$nodes$node_ymin[p$nodes$name == "Gender"], yend = p$nodes$node_ymax[p$nodes$name == "Behavior"])
plot(p) + geom_segment(x = p$nodes$x[p$nodes$name == "Gender"], xend =  p$nodes$x[p$nodes$name == "Gender"], y = p$nodes$node_ymin[p$nodes$name == "Gender"], yend = p$nodes$node_ymax[p$nodes$name == "Behavior"])
plot(p) + geom_segment(aes(x = p$nodes$x[p$nodes$name == "Gender"], xend =  p$nodes$x[p$nodes$name == "Gender"], y = p$nodes$node_ymin[p$nodes$name == "Gender"], yend = p$nodes$node_ymax[p$nodes$name == "Behavior"]))
plot(p) + geom_segment(aes(x = p$nodes$x[p$nodes$name == "Gender"], xend =  p$nodes$x[p$nodes$name == "Gender"], y = p$nodes$node_ymin[p$nodes$name == "Gender"], yend = p$nodes$y[p$nodes$name == "Behavior"]))
plot(p) + geom_segment(aes(x = p$nodes$x[p$nodes$name == "Gender"], xend =  p$nodes$x[p$nodes$name == "Gender"], y = p$nodes$node_ymin[p$nodes$name == "Gender"], yend = p$nodes$y[p$nodes$name == "Behavior"]), arrow = arrow(length = unit(0.03, "npc")))
plot(p) + geom_segment(aes(x = p$nodes$x[p$nodes$name == "Gender"], xend =  p$nodes$x[p$nodes$name == "Gender"], y = p$nodes$node_ymin[p$nodes$name == "Gender"], yend = p$nodes$y[p$nodes$name == "Behavior"]), arrow = arrow(length = unit(0.03, "npc"), type = "closed"))
f <- "quiz1-10.qmd"
tmp <- readLines(f)
sum(tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question.")
tmp <- tmp[-which(tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question.")]
sum(tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question.")
sum(grepl("^Question \\d{1,} ptsEdit this question Delete this question$"))
sum(grepl("^Question \\d{1,} ptsEdit this question Delete this question$", tmp))
tmp <- tmp[-which(grepl("^Question \\d{1,} ptsEdit this question Delete this question$", tmp))]
tmp <- gsub("LaTeX: ", "$", tmp, fixed = TRUE)
clean_file <- function(f){
f <- "quiz1-10.qmd"
tmp <- readLines(f)
tmp <- tmp[-which(tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question.")]
tmp <- tmp[-which(grepl("^Question \\d{1,} ptsEdit this question Delete this question$", tmp))]
tmp <- gsub("LaTeX: ", "$", tmp, fixed = TRUE)
writeLines(tmp, f)
}
paste0("clean_", f)
clean_file <- function(f){
f <- "quiz1-10.qmd"
tmp <- readLines(f)
tmp <- tmp[-which(tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question.")]
tmp <- tmp[-which(grepl("^Question \\d{1,} ptsEdit this question Delete this question$", tmp))]
tmp <- gsub("LaTeX: ", "$", tmp, fixed = TRUE)
writeLines(tmp, paste0("clean_", f))
}
clean_file("quiz1-10.qmd")
clean_file <- function(f){
f <- "quiz1-10.qmd"
tmp <- readLines(f)
tmp <- tmp[-which(tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question.")]
tmp <- tmp[-which(grepl("^Question \\d{1,} ptsEdit this question Delete this question$", tmp))]
tmp <- gsub("LaTeX: ", "$", tmp, fixed = TRUE)
tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
tmp <- gsub("Correct answer", 'answer = ', tmp, fixed = TRUE)
writeLines(tmp, paste0("clean_", f))
}
clean_file("quiz1-10.qmd")
f <- "quiz1-10.qmd"
tmp <- readLines(f)
tmp <- tmp[-which(tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question.")]
tmp <- readLines(f)
tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
tmp <- gsub("Correct answer", 'answer = ', tmp, fixed = TRUE)
writeLines(tmp, paste0("clean_", f))
(1854.475/3) / 272.953
.755*7.168
clean_file <- function(f){
# f <- "quiz1-10.qmd"
tmp <- readLines(f)
these <- tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question."
if(any(these)) tmp <- tmp[-which(these)]
these <- grepl("^Question \\d{1,} ptsEdit this question Delete this question$", tmp)
if(any(these)) tmp <- tmp[-which(these)]
tmp <- gsub("LaTeX: ", "$", tmp, fixed = TRUE)
tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
#tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
tmp <- gsub("Correct answer", 'answer = ', tmp, fixed = TRUE)
writeLines(tmp, paste0("clean_", f))
}
clean_file("tutorial9ss-ss1.qmd")
worcs::git_update()
clean_file <- function(f){
# f <- "quiz1-10.qmd"
tmp <- readLines(f)
these <- tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question."
if(any(these)) tmp <- tmp[-which(these)]
these <- grepl("^Question \\d{1,} ptsEdit this question Delete this question$", tmp)
if(any(these)) tmp <- tmp[-which(these)]
tmp <- gsub("LaTeX: ", "$", tmp, fixed = TRUE)
tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
#tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
tmp <- gsub("Correct answer", 'answer = ', tmp, fixed = TRUE)
writeLines(tmp, paste0("clean_", f))
}
clean_file("tutorial 11be - be3.qmd")
clean_file <- function(f){
# f <- "quiz1-10.qmd"
tmp <- readLines(f)
these <- tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question."
if(any(these)) tmp <- tmp[-which(these)]
these <- grepl("^Question \\d{1,} ptsEdit this question Delete this question$", tmp)
if(any(these)) tmp <- tmp[-which(these)]
tmp <- gsub("QuestionEdit this question Delete this question", "", tmp)
tmp <- gsub("LaTeX: ", "$", tmp, fixed = TRUE)
tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
#tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
tmp <- gsub("Correct answer", 'answer = ', tmp, fixed = TRUE)
writeLines(tmp, paste0("clean_", f))
}
clean_file <- function(f){
# f <- "quiz1-10.qmd"
tmp <- readLines(f)
these <- tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question."
if(any(these)) tmp <- tmp[-which(these)]
these <- grepl("^Question \\d{1,} ptsEdit this question Delete this question$", tmp)
if(any(these)) tmp <- tmp[-which(these)]
tmp <- gsub("QuestionEdit this question Delete this question", "", tmp)
tmp <- gsub("LaTeX: ", "$", tmp, fixed = TRUE)
tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
#tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
tmp <- gsub("Correct answer", 'answer = ', tmp, fixed = TRUE)
writeLines(tmp, paste0("clean_", f))
}
clean_file("tutorial 11be - be3.qmd")
clean_file <- function(f){
# f <- "quiz1-10.qmd"
tmp <- readLines(f)
these <- tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question."
if(any(these)) tmp <- tmp[-which(these)]
these <- grepl("^Question \\d{1,} ptsEdit this question Delete this question$", tmp)
if(any(these)) tmp <- tmp[-which(these)]
tmp <- gsub("Question(\\d{1,} pts)?Edit this question Delete this question", "", tmp)
tmp <- gsub("QuestionEdit this question Delete this question", "", tmp)
tmp <- gsub("LaTeX: ", "$", tmp, fixed = TRUE)
tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
#tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
tmp <- gsub("Correct answer", 'answer = ', tmp, fixed = TRUE)
writeLines(tmp, paste0("clean_", f))
}
clean_file <- function(f){
# f <- "quiz1-10.qmd"
tmp <- readLines(f)
these <- tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question."
if(any(these)) tmp <- tmp[-which(these)]
these <- grepl("^Question \\d{1,} ptsEdit this question Delete this question$", tmp)
if(any(these)) tmp <- tmp[-which(these)]
tmp <- gsub("Question(\\d{1,} pts)?Edit this question Delete this question", "", tmp)
tmp <- gsub("QuestionEdit this question Delete this question", "", tmp)
tmp <- gsub("LaTeX: ", "$", tmp, fixed = TRUE)
tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
#tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
tmp <- gsub("Correct answer", 'answer = ', tmp, fixed = TRUE)
writeLines(tmp, paste0("clean2_", f))
}
clean_file("tutorial 11be - be3.qmd")
.95*20
clean_file <- function(f){
# f <- "quiz1-10.qmd"
tmp <- readLines(f)
these <- tmp == "Move To...This element is a more accessible alternative to drag & drop reordering. Press Enter or Space to move this question."
if(any(these)) tmp <- tmp[-which(these)]
these <- grepl("^Question \\d{1,} ptsEdit this question Delete this question$", tmp)
if(any(these)) tmp <- tmp[-which(these)]
tmp <- gsub("Question(\\d{1,} pts)?Edit this question Delete this question", "", tmp)
tmp <- gsub("QuestionEdit this question Delete this question", "", tmp)
tmp <- gsub("LaTeX: ", "$", tmp, fixed = TRUE)
tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
#tmp <- gsub("General answer comments", '`r hide("Explanation")`', tmp, fixed = TRUE)
tmp <- gsub("Correct answer", 'answer = ', tmp, fixed = TRUE)
writeLines(tmp, paste0("clean_", f))
}
clean_file("tutorial 10ss -ss2.qmd")
clean_file("tutorial 10be - be2.qmd")
-5.833 + .946
-5.833 + 4.887
exp(.946)
clean_file("tutorial 11ss -ss3.qmd")
4.6-.9
4.6+.9
(7.6-6)/.587
x <- seq(0, 3, by = .1)
x <- seq(0, 3, by = .1)
x
y <- seq(0, .09, by = .01)
i=0
i+y
pnorm(i+y)
pnorm(i+y, lower.tail = FALSE)
sapply(x, function(i){
pnorm(i+y, lower.tail = FALSE)
})
tab <- sapply(x, function(i){
pnorm(i+y, lower.tail = FALSE)
})
tab
tab <- data.frame(Z = x, tab)
x
tab <- t(sapply(x, function(i){
pnorm(i+y, lower.tail = FALSE)
}))
tab <- data.frame(Z = x, tab)
names(tab)[-1] <- y
View(tab)
DT::datatable(tab) |>
formatRound(columns=names(tab)[-1], digits=3)
DT::datatable(tab) |>
DT::formatRound(columns=names(tab)[-1], digits=3)
DT::datatable(tab, rownames = FALSE) |>
DT::formatRound(columns=names(tab)[-1], digits=3)
DT::datatable(tab, rownames = FALSE, options = list(ordering=F)) |>
DT::formatRound(columns=names(tab)[-1], digits=3)
y
x
tab <- data.frame(Z = as.character(x), tab)
names(tab)[-1] <- y
library(DT)
DT::datatable(tab, rownames = FALSE, options = list(ordering=F)) |>
DT::formatRound(columns=names(tab)[-1], digits=3)
DT::datatable(tab, rownames = FALSE, options = list(ordering=F, pageLength = nrow(tab))) |>
DT::formatRound(columns=names(tab)[-1], digits=3)
library(ggplot2)
ggplot(data = data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1)) +
ylab("Probability density") +
xlab("Z") +
scale_y_continuous(breaks = NULL, expand = c(0,0)) +
scale_x_continuous(breaks = c(-4:4)) +
geom_vline(xintercept = 0, color = "black") +
geom_area(stat = "function", fun = dnorm, fill = "red", alpha = .2, xlim = c(-1, 1), args = list(mean = 0, sd = 1)) +
geom_area(stat = "function", fun = dnorm, fill = "red", alpha = .2, xlim = c(-2, 2), args = list(mean = 0, sd = 1)) +
geom_area(stat = "function", fun = dnorm, fill = "red", alpha = .2, xlim = c(-3, 3), args = list(mean = 0, sd = 1)) +
geom_errorbar(aes(xmin = -1, xmax = 1, y = dnorm(1)), width = .03)+
geom_label(x = 0, y = dnorm(1), label = "+/-1SD: 68%") +
geom_errorbar(aes(xmin = -2, xmax = 2, y = dnorm(2)), width = .03)+
geom_label(x = 0, y = dnorm(2), label = "+/-2SD: 95%") +
geom_errorbar(aes(xmin = -3, xmax = 3, y = dnorm(3)), width = .03)+
geom_label(x = 0, y = dnorm(3), label = "+/-3SD: 99.7%") +
theme_bw()
ggplot(data = data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1)) +
ylab("Probability density") +
xlab("Z") +
scale_y_continuous(breaks = NULL, expand = c(0,0)) +
scale_x_continuous(breaks = c(-4:4)) +
geom_vline(xintercept = 0, color = "black") +
geom_area(stat = "function", fun = dnorm, fill = "red", alpha = .2, xlim = c(2, 4), args = list(mean = 0, sd = 1))+
theme_bw()
ggplot(data = data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1)) +
ylab("Probability density") +
xlab("Z") +
scale_y_continuous(breaks = NULL, expand = c(0,0)) +
scale_x_continuous(breaks = c(-4:4)) +
geom_vline(xintercept = 0, color = "black") +
geom_area(stat = "function", fun = dnorm, fill = "red", alpha = .2, xlim = c(2, 4), args = list(mean = 0, sd = 1))+
geom_segment(aes(x = 2, xend = 2, y = dnorm(2), yend = dnorm(2)), color = "red")+
theme_bw()
ggplot(data = data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1)) +
ylab("Probability density") +
xlab("Z") +
scale_y_continuous(breaks = NULL, expand = c(0,0)) +
scale_x_continuous(breaks = c(-4:4)) +
geom_vline(xintercept = 0, color = "black") +
geom_area(stat = "function", fun = dnorm, fill = "red", alpha = .2, xlim = c(2, 4), args = list(mean = 0, sd = 1))+
geom_segment(x = 2, xend = 2, y = dnorm(2), yend = dnorm(2), color = "red")+
theme_bw()
dnorm(2)
ggplot(data = data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1)) +
ylab("Probability density") +
xlab("Z") +
scale_y_continuous(breaks = NULL, expand = c(0,0)) +
scale_x_continuous(breaks = c(-4:4)) +
geom_vline(xintercept = 0, color = "black") +
geom_area(stat = "function", fun = dnorm, fill = "red", alpha = .2, xlim = c(2, 4), args = list(mean = 0, sd = 1))+
geom_segment(aes(x = 2, xend = 2, y = 0, yend = dnorm(2)), color = "red")+
theme_bw()
x <- seq(1, 30)
x
x <- 1:30
y <- c(.40, .25, .10, .05, .025, .01, .005, .001)
i
i=1
pnorm(i+y, lower.tail = FALSE)
qt(y, df = i)
qt(y, df = i, lower.tail = FALSE)
tab <- t(sapply(x, function(i){
qt(y, df = i, lower.tail = FALSE)
}))
x
tab
tab <- data.frame(df = as.character(x), tab)
names(tab)[-1] <- y
names(tab)[-1] <- paste0("p = ", y)
library(DT)
DT::datatable(tab, rownames = FALSE, options = list(ordering=F, pageLength = nrow(tab))) |>
DT::formatRound(columns=names(tab)[-1], digits=3)
2/ (10/4)
pnorm(.8)
read.table("clipboard", sep = ",")
5/sqrt(50)
se = 10/sqrt(75)
120-(2*se)
120-(se)
120-(15/sqrt(75))
120-(2*10)
120+(15/sqrt(75))
120+(10/sqrt(75))
120+(2*(10/sqrt(75)))
120 + 2*e
120 + 2*se
(3000-2650) / (300/sqrt(75))
(2700-2650) / (300/sqrt(75))
(2800-2650) / (300/sqrt(75))
(2750-2650) / (300/sqrt(75))
pnorm((2750-2650) / (300/sqrt(75)), lower.tail = F)
3213 + 3*(254/sqrt(5000))
3213 - 3*(254/sqrt(5000))
pnorm(33, mean = 30, sd = (4/sqrt(36)))
pnorm(32, mean = 30, sd = (4/sqrt(36)))
pnorm(32, mean = 30, sd = (4/sqrt(15)))
sqrt(.51*.49 / 100)
sqrt((.51*.49) / 100)
pnorm(.6, .51, .05, lower.tail = F)
.51*184+.49*170.6
pnorm(174.62, mean = 177.434, sd = .772)
(174.62- 177.434)/.772
(.433-.5)/.037
.433+(2*.037)
.433-(2*.037)
sqrt((1-.057^2)/(178-2))
pnorm(.057, 0, 0.07525529, lower.tail = F)
.5-0.2243986
.057/.075
pnorm(.76)
pnorm(.76, lower.tail = F)
.5-.2
.5-.22
