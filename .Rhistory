x = c(1, 2, 2),
y = c(100, 60, 40),
label = c("Total Variance", "Unique variance", "Common variance"),
labely = c(50, 20, 70)
)
ggplot(df_plot, aes(fill=label, y=y, x=x, label = label)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(y = labely)) +
ggplot2::scale_x_reverse() +
ggplot2::scale_y_reverse()+
coord_flip() +
theme_void() +
labs(fill = "Variance")
df_plot <- data.frame(
x = c(1, 2, 2),
y = c(100, 60, 40),
label = c("Total Variance", "Common variance", "Unique variance"),
labely = c(50, 20, 70)
)
ggplot(df_plot, aes(fill=label, y=y, x=x, label = label)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(y = labely)) +
ggplot2::scale_x_reverse() +
ggplot2::scale_y_reverse()+
coord_flip() +
theme_void() +
labs(fill = "Variance")
df_plot <- data.frame(
x = c(1, 2, 2),
y = c(100, 60, 40),
label = ordered(c("Total Variance", "Common variance", "Unique variance")),
labely = c(50, 20, 70)
)
ggplot(df_plot, aes(fill=label, y=y, x=x, label = label)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(y = labely)) +
ggplot2::scale_x_reverse() +
ggplot2::scale_y_reverse()+
coord_flip() +
theme_void() +
labs(fill = "Variance")
df_plot <- data.frame(
x = c(1, 2, 2),
y = c(100, 60, 40),
label = ordered(c("Total Variance", "Common variance", "Unique variance")),
labely = c(50, 20, 70)
)
ggplot(df_plot, aes(fill=label, y=y, x=x, label = label)) +
geom_bar(position="stack", stat="identity") +
geom_label(aes(y = labely)) +
ggplot2::scale_x_reverse() +
ggplot2::scale_y_reverse()+
coord_flip() +
theme_void() +
labs(fill = "Variance")
df_plot <- data.frame(
x = c(1, 2, 2),
y = c(100, 60, 40),
label = ordered(c("Total Variance", "Common variance", "Unique variance")),
labely = c(50, 20, 70)
)
ggplot(df_plot, aes(fill=label, y=y, x=x, label = label)) +
geom_bar(position="stack", stat="identity") +
geom_label(aes(y = labely), fill = "white") +
ggplot2::scale_x_reverse() +
ggplot2::scale_y_reverse()+
coord_flip() +
theme_void() +
labs(fill = "Variance")
df_plot <- data.frame(
x = c(1, 2, 2),
y = c(100, 60, 40),
label = ordered(c("Total Variance", "Common variance", "Unique variance")),
labely = c(50, 20, 70)
)
ggplot(df_plot, aes(fill=label, y=y, x=x, label = label)) +
geom_bar(position="stack", stat="identity", alpha = .2) +
geom_label(aes(y = labely), fill = "white") +
ggplot2::scale_x_reverse() +
ggplot2::scale_y_reverse()+
coord_flip() +
theme_void() +
labs(fill = "Variance") +
scale_fill_manual(c("Total Variance" = "green", "Common variance" = "blue", "Unique variance" = "red"))
df_plot <- data.frame(
x = c(1, 2, 2),
y = c(100, 60, 40),
label = ordered(c("Total Variance", "Common variance", "Unique variance")),
labely = c(50, 20, 70)
)
ggplot(df_plot, aes(fill=label, y=y, x=x, label = label)) +
geom_bar(position="stack", stat="identity", alpha = .2) +
geom_label(aes(y = labely), fill = "white") +
ggplot2::scale_x_reverse() +
ggplot2::scale_y_reverse()+
coord_flip() +
theme_void() +
labs(fill = "Variance") +
scale_fill_manual(values = c("Total Variance" = "green", "Common variance" = "blue", "Unique variance" = "red"))
df_plot <- data.frame(
x = c(1, 2, 2),
y = c(100, 60, 40),
label = ordered(c("Total Variance", "Common variance", "Unique variance")),
labely = c(50, 20, 70)
)
ggplot(df_plot, aes(fill=label, y=y, x=x, label = label)) +
geom_bar(position="stack", stat="identity", alpha = .8) +
geom_label(aes(y = labely), fill = "white") +
ggplot2::scale_x_reverse() +
ggplot2::scale_y_reverse()+
coord_flip() +
theme_void() +
labs(fill = "Variance") +
scale_fill_manual(values = c("Total Variance" = "green", "Common variance" = "blue", "Unique variance" = "red"))
df_plot <- data.frame(
x = c(1, 2, 2),
y = c(100, 60, 40),
label = ordered(c("Total Variance", "Common variance", "Unique variance")),
labely = c(50, 20, 70)
)
ggplot(df_plot, aes(fill=label, y=y, x=x, label = label)) +
geom_bar(position="stack", stat="identity", alpha = .5) +
geom_label(aes(y = labely), fill = "white") +
ggplot2::scale_x_reverse() +
ggplot2::scale_y_reverse()+
coord_flip() +
theme_void() +
labs(fill = "Variance") +
scale_fill_manual(values = c("Total Variance" = "green", "Common variance" = "blue", "Unique variance" = "red"))
read.table("clipboard")
tmp = read.table("clipboard")
sum(tmp^2)
tmp = read.table("clipboard")
View(tmp)
which.max(tmp)
which.max(unlist(tmp))
unlist(tmp)[33]
56107.93867
19217.19901
10883.57798
7562.907605
tmp = read.table("clipboard")
tmp
which.min9
which.min(tmp)
which.min(unlist(tmp))
which.min(unlist(read.clipboard("table")))
which.min(unlist(read.table("clipboard")))
sqrt(119.13 - 84)/sqrt((178 - 1)*84)
install.packages("rethinking")
remotes::install_github("mcelreath/rethinking")
remotes::install_github("rmcelreath/rethinking")
install.packages("cmdstanr")
remotes::install_github("rmcelreath/cmdstanr")
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
remotes::install_github("rmcelreath/rethinking")
rethinking::chimpanzees
library(rethinking) 10.1
library(rethinking)
library(rethinking)
data(chimpanzees)
head(chimpanzees)
dim(chimpanzees)
n = 300
n = 70
condition <- sample.int(2, n = n, replace = T)
condition <- sample.int(2, n = n, replace = T)
performance <- rnorm(n)
prosocial <- -.5 + condition*performance + rnorm(n)
n = 70
condition <- sample.int(2, n = n, replace = T)
performance <- rnorm(n)
prosocial <- -.5 + condition*performance + rnorm(n)
prosocial <- cut(prosocial, 2)
prosocial
set.seed(664)
n = 70
condition <- sample.int(2, n = n, replace = T)
performance <- rnorm(n)
prosocial <- -.5 + condition*performance + rnorm(n)
prosocial <- as.integer(cut(prosocial, 2))-1
set.seed(664)
n = 70
condition <- sample.int(2, n = n, replace = T)
performance <- rnorm(n)
prosocial <- -.5 + condition*performance + rnorm(n)
prosocial <- as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
condition <- sample.int(2, n = n, replace = T)
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- -.5 + condition*performance + rnorm(n)
prosocial <- as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- -.1 + condition*performance + rnorm(n)
prosocial <- as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- 3 + condition*performance + rnorm(n)
prosocial <- as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- 10 + condition*performance + rnorm(n)
prosocial <- as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- -10 + condition*performance + rnorm(n)
prosocial <- as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- -10 + condition*performance + rnorm(n)
prosocial <- rbinom(1, size = n, prob =  log(prosocial)/(1-log(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- -10 + condition*performance + rnorm(n)
prosocial <- rbinom(1, size = n, prob =  log(prosocial)/(1-log(prosocial)))
prosocial <- -10 + condition*performance + rnorm(n)
log(prosocial)
prosocial <- 10 + condition*performance + rnorm(n)
prosocial <- rbinom(1, size = n, prob =  log(prosocial)/(1-log(prosocial)))
10 + condition*performance + rnorm(n)
prosocial <- 10 + condition*performance + rnorm(n)
log(prosocial)
log(prosocial)/(1-log(prosocial))
exp(prosocial)/(1+exp(prosocial))
prosocial <- 2 + condition*performance + rnorm(n)
exp(prosocial)/(1+exp(prosocial))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- .2 + condition*performance + rnorm(n)
prosocial <- rbinom(1, size = n, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- .2 + condition*performance + rnorm(n)
prosocial <- rbinom(1, size = n, prob =  exp(prosocial)/(1+exp(prosocial)))
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- .2 + condition*performance + rnorm(n)
rbinom(1, size = n, prob =  exp(prosocial)/(1+exp(prosocial)))
rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- .2 + condition*performance + rnorm(n)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
summary(res)
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- .2 + condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n)
prosocial <- 0 + condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
condition*performance
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- 0 + condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -1 + condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -3 + condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -3 + 2*condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -3 + 1.3*condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -3 + 1.6*condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -3 + 2*condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -3 + 1.9*condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -3 + 1.96*condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -3 + 1.95*condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -3 + 1.94*condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -3 + 1.93*condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -3 + 1.92*condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
set.seed(664)
n = 70
condition <- sample.int(2, size = n, replace = T)
performance <- rnorm(n, .4)
prosocial <- -3 + 1.96*condition*performance + rnorm(n, .2)
prosocial <- rbinom(n = n, size = 1, prob =  exp(prosocial)/(1+exp(prosocial)))
# as.integer(cut(prosocial, 2))-1
res <- glm(prosocial ~ condition*performance, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
res <- glm(prosocial ~ 1, family = "binomial")
# summary(res)
exp(coef(res)[1])/(1+exp(coef(res)[1]))
